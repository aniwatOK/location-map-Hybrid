import React, { useEffect, useRef, useState } from "react";
import { StyleSheet, Text, View, TouchableOpacity, Modal, TextInput, FlatList, Alert} from "react-native";
import * as Location from "expo-location";
import MapView, { Marker, PROVIDER_DEFAULT } from "react-native-maps";
import AsyncStorage from "@react-native-async-storage/async-storage";

const STORAGE_KEY = "@saved_places_v1";

type LatLng = { latitude: number; longitude: number };

export default function App() {
  const mapRef = useRef<MapView | null>(null);

  const [hasLocationPerm, setHasLocationPerm] = useState<boolean | null>(null);
  const [userLocation, setUserLocation] = useState<LatLng | null>(null);

  const [region, setRegion] = useState({
    latitude: 17.803266,
    longitude: 102.747888,
    latitudeDelta: 0.05,
    longitudeDelta: 0.05,
  });

  const [savedPlaces, setSavedPlaces] = useState<
    { id: string; title: string; description: string; latitude: number; longitude: number; ts: number }[]
  >([]);

  // UI states
  const [saveModalVisible, setSaveModalVisible] = useState(false);
  const [listVisible, setListVisible] = useState(false);
  const [titleInput, setTitleInput] = useState("");
  const [descInput, setDescInput] = useState("");

  // ‡∏à‡∏∏‡∏î‡∏ó‡∏µ‡πà ‚Äú‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏à‡∏∞‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‚Äù (‡∏°‡∏≤‡∏à‡∏≤‡∏Å‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô ‡∏´‡∏£‡∏∑‡∏≠‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏£‡∏Å‡∏î‡∏Ñ‡πâ‡∏≤‡∏á‡∏ö‡∏ô‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà)
  const [pendingCoord, setPendingCoord] = useState<LatLng | null>(null);

  useEffect(() => {
    (async () => {
      const { status } = await Location.requestForegroundPermissionsAsync();
      setHasLocationPerm(status === "granted");

      const raw = await AsyncStorage.getItem(STORAGE_KEY);
      if (raw) {
        try {
          const parsed = JSON.parse(raw);
          if (Array.isArray(parsed)) setSavedPlaces(parsed);
        } catch {}
      }
    })();
  }, []);

  const locateMe = async () => {
    try {
      if (!hasLocationPerm) {
        const { status } = await Location.requestForegroundPermissionsAsync();
        if (status !== "granted") return;
        setHasLocationPerm(true);
      }
      const loc = await Location.getCurrentPositionAsync({});
      const coords = { latitude: loc.coords.latitude, longitude: loc.coords.longitude };
      setUserLocation(coords);
      const next = { ...coords, latitudeDelta: 0.01, longitudeDelta: 0.01 };
      setRegion(next);
      mapRef.current?.animateToRegion(next, 600);
    } catch (e) {
      console.warn("locateMe error:", e);
    }
  };

  // ‡πÄ‡∏õ‡∏¥‡∏î modal ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å ‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ‡∏û‡∏¥‡∏Å‡∏±‡∏î‡∏à‡∏≤‡∏Å pendingCoord ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ, ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÉ‡∏ä‡πâ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
  const openSaveModal = async (coord?: LatLng) => {
    if (coord) {
      setPendingCoord(coord);
    } else {
      if (!userLocation) await locateMe();
      setPendingCoord((prev) => prev ?? userLocation);
    }
    setTitleInput("");
    setDescInput("");
    setSaveModalVisible(true);
  };

  const savePlace = async () => {
    if (!pendingCoord) return;
    const newItem = {
      id: String(Date.now()),
      title: titleInput.trim() || "‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡∏µ‡πà‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ß‡πâ",
      description: descInput.trim() || "",
      latitude: pendingCoord.latitude,
      longitude: pendingCoord.longitude,
      ts: Date.now(),
    };
    const updated = [newItem, ...savedPlaces];
    setSavedPlaces(updated);
    await AsyncStorage.setItem(STORAGE_KEY, JSON.stringify(updated));
    setSaveModalVisible(false);
    // ‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå‡∏°‡∏≤‡∏£‡πå‡∏Ñ‡πÄ‡∏Å‡∏≠‡∏£‡πå‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß
    setPendingCoord(null);
  };

  const goToPlace = (p: LatLng) => {
    const next = { ...p, latitudeDelta: 0.01, longitudeDelta: 0.01 };
    setRegion(next);
    mapRef.current?.animateToRegion(next, 600);
    setListVisible(false);
  };

  // üëâ ‡πÉ‡∏´‡∏°‡πà: ‡∏Å‡∏î‡∏Ñ‡πâ‡∏≤‡∏á‡∏ö‡∏ô‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏à‡∏∏‡∏î‡∏ô‡∏±‡πâ‡∏ô
  const handleMapLongPress = (e: any) => {
    const coord = e.nativeEvent.coordinate;
    setPendingCoord(coord);
    openSaveModal(coord);
  };

  const deletePlace = async (id: string) => {
    const updated = savedPlaces.filter((p) => p.id !== id);
    setSavedPlaces(updated);
    await AsyncStorage.setItem(STORAGE_KEY, JSON.stringify(updated));
  };

  const confirmDeletePlace = (id: string, title?: string) => {
    Alert.alert(
      "‡∏•‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà",
      `‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö ‚Äú${title || "‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ô‡∏µ‡πâ"}‚Äù ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?`,
      [
        { text: "‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å", style: "cancel" },
        { text: "‡∏•‡∏ö", style: "destructive", onPress: () => deletePlace(id) },
      ],
      { cancelable: true }
    );
  };

  const clearAllPlaces = () => {
    if (savedPlaces.length === 0) return;
    Alert.alert(
      "‡∏•‡∏ö‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î",
      "‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡∏µ‡πà‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?",
      [
        { text: "‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å", style: "cancel" },
        {
          text: "‡∏•‡∏ö‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î",
          style: "destructive",
          onPress: async () => {
            setSavedPlaces([]);
            await AsyncStorage.setItem(STORAGE_KEY, JSON.stringify([]));
          },
        },
      ],
      { cancelable: true }
    );
  };

  if (hasLocationPerm === null) {
    return (
      <View style={styles.center}>
        <Text>‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Ç‡∏≠‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‚Ä¶</Text>
      </View>
    );
  }

  if (!hasLocationPerm) {
    return (
      <View style={styles.center}>
        <Text style={{ marginBottom: 10 }}>‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡πâ‡∏≠‡∏á‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà</Text>
        <TouchableOpacity style={styles.primaryBtn} onPress={locateMe}>
          <Text style={styles.primaryBtnText}>‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡πÅ‡∏•‡∏∞‡∏£‡∏∞‡∏ö‡∏∏‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á</Text>
        </TouchableOpacity>
      </View>
    );
  }

  return (
    <View style={styles.container}>
      <MapView
        ref={mapRef}
        provider={PROVIDER_DEFAULT}
        style={StyleSheet.absoluteFill}
        initialRegion={region}
        onRegionChangeComplete={setRegion}
        showsUserLocation={true}
        showsMyLocationButton={false}
        onLongPress={handleMapLongPress}       // üëà ‡∏Å‡∏î‡∏Ñ‡πâ‡∏≤‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏à‡∏∏‡∏î
      >
        {/* ‡∏°‡∏≤‡∏£‡πå‡∏Ñ‡πÄ‡∏Å‡∏≠‡∏£‡πå‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡∏µ‡πà‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å */}
        {savedPlaces.map((p) => (
          <Marker
            key={p.id}
            coordinate={{ latitude: p.latitude, longitude: p.longitude }}
            title={p.title}
            description={p.description}
            pinColor="tomato"
            // ‡∏ñ‡πâ‡∏≤‡∏≠‡∏¢‡∏≤‡∏Å‡πÉ‡∏´‡πâ‡πÅ‡∏ï‡∏∞ Marker ‡πÅ‡∏•‡πâ‡∏ß‡πÄ‡∏õ‡∏¥‡∏î modal ‡πÄ‡∏û‡∏∑‡πà‡∏≠ "‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÉ‡∏´‡∏°‡πà‡∏à‡∏≤‡∏Å‡∏à‡∏∏‡∏î‡∏ô‡∏µ‡πâ" ‡∏Å‡πá‡∏ó‡∏≥‡πÑ‡∏î‡πâ ‡πÅ‡∏ï‡πà‡∏õ‡∏Å‡∏ï‡∏¥ Marker ‡∏ô‡∏µ‡πâ‡∏Ñ‡∏∑‡∏≠‡∏≠‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÅ‡∏•‡πâ‡∏ß
            // onPress={() => openSaveModal({ latitude: p.latitude, longitude: p.longitude })}
          />
        ))}

        {/* ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á */}
        <Marker
          coordinate={{ latitude: 17.803266, longitude: 102.747888 }}
          title="‡∏Ñ‡∏ì‡∏∞‡∏™‡∏´‡∏ß‡∏¥‡∏ó‡∏¢‡∏≤‡∏Å‡∏≤‡∏£ ‡∏°‡∏´‡∏≤‡∏ß‡∏¥‡∏ó‡∏¢‡∏≤‡∏•‡∏±‡∏¢‡∏Ç‡∏≠‡∏ô‡πÅ‡∏Å‡πà‡∏ô"
          description="‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡πÅ‡∏•‡∏∞‡∏≠‡∏≠‡∏Å‡πÄ‡∏Å‡∏£‡∏î ‡∏à.‡∏´‡∏ô‡∏≠‡∏á‡∏Ñ‡∏≤‡∏¢"
          pinColor="blue"
          // ‡πÅ‡∏ï‡∏∞ Marker ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÅ‡∏•‡πâ‡∏ß‡∏≠‡∏¢‡∏≤‡∏Å‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡∏≠‡∏á‡πÄ‡∏£‡∏≤‡πÑ‡∏î‡πâ:
          onCalloutPress={() =>
            openSaveModal({ latitude: 17.803266, longitude: 102.747888 })
          }
        />

        {/* ‡∏°‡∏≤‡∏£‡πå‡∏Ñ‡πÄ‡∏Å‡∏≠‡∏£‡πå‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏à‡∏∏‡∏î‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏à‡∏∞‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å (‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏£‡∏Å‡∏î‡∏Ñ‡πâ‡∏≤‡∏á) */}
        {pendingCoord && (
          <Marker
            coordinate={pendingCoord}
            title="‡∏à‡∏∞‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏à‡∏∏‡∏î‡∏ô‡∏µ‡πâ"
            description="‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ä‡∏∑‡πà‡∏≠/‡∏Ñ‡∏≥‡∏ö‡∏£‡∏£‡∏¢‡∏≤‡∏¢‡πÉ‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡∏ñ‡∏±‡∏î‡πÑ‡∏õ"
            pinColor="green"
          />
        )}
      </MapView>

      {/* ‡∏õ‡∏∏‡πà‡∏°‡∏•‡∏≠‡∏¢ */}
      <View style={styles.fabContainer}>
        <TouchableOpacity style={styles.fab} onPress={locateMe}>
          <Text style={styles.fabText}>‡∏´‡∏≤‡∏â‡∏±‡∏ô</Text>
        </TouchableOpacity>

        <TouchableOpacity style={styles.fab} onPress={() => openSaveModal()}>
          <Text style={styles.fabText}>‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å</Text>
        </TouchableOpacity>

        <TouchableOpacity style={styles.fab} onPress={() => setListVisible(true)}>
          <Text style={styles.fabText}>‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£</Text>
        </TouchableOpacity>
      </View>

      {/* Modal ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà */}
      <Modal visible={saveModalVisible} transparent animationType="fade">
        <View style={styles.modalBackdrop}>
          <View style={styles.modalCard}>
            <Text style={styles.modalTitle}>‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà</Text>

            {/* ‡πÅ‡∏™‡∏î‡∏á‡∏û‡∏¥‡∏Å‡∏±‡∏î‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ß‡πâ (‡∏≠‡πà‡∏≤‡∏ô‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß) */}
            {pendingCoord && (
              <Text style={{ marginTop: 6, color: "#666", fontSize: 12 }}>
                {pendingCoord.latitude.toFixed(6)}, {pendingCoord.longitude.toFixed(6)}
              </Text>
            )}

            <TextInput
              style={styles.input}
              placeholder="‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà"
              value={titleInput}
              onChangeText={setTitleInput}
            />
            <TextInput
              style={[styles.input, { height: 80 }]}
              placeholder="‡∏Ñ‡∏≥‡∏ö‡∏£‡∏£‡∏¢‡∏≤‡∏¢"
              multiline
              value={descInput}
              onChangeText={setDescInput}
            />
            <View style={styles.row}>
              <TouchableOpacity
                style={[styles.btn, styles.btnCancel]}
                onPress={() => {
                  setSaveModalVisible(false);
                  setPendingCoord(null); // ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏à‡∏∏‡∏î‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
                }}
              >
                <Text style={styles.btnText}>‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å</Text>
              </TouchableOpacity>
              <TouchableOpacity style={[styles.btn, styles.btnOK]} onPress={savePlace}>
                <Text style={styles.btnText}>‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å</Text>
              </TouchableOpacity>
            </View>
          </View>
        </View>
      </Modal>

      {/* Modal ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà */}
      <Modal visible={listVisible} transparent animationType="slide">
      <View style={styles.listBackdrop}>
        <View style={styles.listCard}>
          <View style={styles.rowBetween}>
            <Text style={styles.modalTitle}>‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡∏µ‡πà‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å</Text>
            <View style={{ flexDirection: "row", alignItems: "center", gap: 12 }}>
              <TouchableOpacity onPress={clearAllPlaces} disabled={savedPlaces.length === 0}>
                <Text style={[styles.smallAction, savedPlaces.length === 0 && { opacity: 0.4 }]}>‡∏•‡∏ö‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î</Text>
              </TouchableOpacity>
              <TouchableOpacity onPress={() => setListVisible(false)}>
                <Text style={styles.smallAction}>‡∏õ‡∏¥‡∏î</Text>
              </TouchableOpacity>
            </View>
          </View>

          {savedPlaces.length === 0 ? (
            <Text style={{ color: "#666", marginTop: 8 }}>‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•</Text>
          ) : (
            <FlatList
              data={savedPlaces}
              keyExtractor={(item) => item.id}
              ItemSeparatorComponent={() => <View style={{ height: 8 }} />}
              renderItem={({ item }) => (
                <TouchableOpacity
                  style={styles.placeItem}
                  onPress={() => goToPlace({ latitude: item.latitude, longitude: item.longitude })}
                  onLongPress={() => confirmDeletePlace(item.id, item.title)}   // üëà ‡∏•‡∏ö‡∏î‡πâ‡∏ß‡∏¢‡∏Å‡∏≤‡∏£‡∏Å‡∏î‡∏Ñ‡πâ‡∏≤‡∏á
                >
                  <View style={styles.rowBetween}>
                    <View style={{ flex: 1, paddingRight: 8 }}>
                      <Text style={styles.placeTitle}>{item.title}</Text>
                      {!!item.description && <Text style={styles.placeDesc}>{item.description}</Text>}
                      <Text style={styles.placeCoord}>
                        {item.latitude.toFixed(6)}, {item.longitude.toFixed(6)}
                      </Text>
                    </View>

                    {/* ‡∏õ‡∏∏‡πà‡∏°‡∏•‡∏ö‡πÅ‡∏ö‡∏ö‡∏Å‡∏î‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß */}
                    <TouchableOpacity style={styles.deleteBtn} onPress={() => confirmDeletePlace(item.id, item.title)}>
                      <Text style={styles.deleteBtnText}>‡∏•‡∏ö</Text>
                    </TouchableOpacity>
                  </View>
                </TouchableOpacity>
              )}
            />
          )}
        </View>
      </View>
    </Modal>
    </View>
  );
}

// --- Styles ---
const styles = StyleSheet.create({
  container: { flex: 1, backgroundColor: "#fff" },
  center: { flex: 1, alignItems: "center", justifyContent: "center", padding: 24 },

  fabContainer: {
    position: "absolute",
    right: 16,
    bottom: 24,
    gap: 10,
    alignItems: "flex-end",
  },
  fab: {
    backgroundColor: "#2563eb",
    paddingVertical: 10,
    paddingHorizontal: 14,
    borderRadius: 12,
    elevation: 3,
  },
  fabText: { color: "#fff", fontWeight: "700" },

  primaryBtn: {
    backgroundColor: "#2563eb",
    paddingVertical: 12,
    paddingHorizontal: 16,
    borderRadius: 10,
    alignItems: "center",
  },
  primaryBtnText: { color: "#fff", fontWeight: "700" },

  modalBackdrop: {
    flex: 1,
    backgroundColor: "rgba(0,0,0,0.4)",
    alignItems: "center",
    justifyContent: "center",
    padding: 16,
  },
  modalCard: {
    width: "100%",
    backgroundColor: "#fff",
    borderRadius: 12,
    padding: 16,
  },
  modalTitle: { fontSize: 18, fontWeight: "700" },
  input: {
    borderWidth: 1,
    borderColor: "#ddd",
    borderRadius: 8,
    padding: 10,
    marginTop: 12,
  },
  row: { flexDirection: "row", gap: 10, marginTop: 14 },
  btn: { flex: 1, alignItems: "center", paddingVertical: 12, borderRadius: 10 },
  btnCancel: { backgroundColor: "#64748b" },
  btnOK: { backgroundColor: "#16a34a" },
  btnText: { color: "#fff", fontWeight: "700" },

  listBackdrop: {
    flex: 1,
    backgroundColor: "rgba(0,0,0,0.35)",
    justifyContent: "flex-end",
  },
  listCard: {
    backgroundColor: "#fff",
    borderTopLeftRadius: 16,
    borderTopRightRadius: 16,
    padding: 16,
    maxHeight: "70%",
  },
  rowBetween: { flexDirection: "row", justifyContent: "space-between", alignItems: "center" },
  placeItem: { padding: 12, borderWidth: 1, borderColor: "#eee", borderRadius: 10 },
  placeTitle: { fontWeight: "700" },
  placeDesc: { marginTop: 4, color: "#555" },
  placeCoord: { marginTop: 6, fontSize: 12, color: "#666" },

  smallAction: { color: "#0f172a", fontWeight: "600" },

  deleteBtn: {
    backgroundColor: "#ef4444",
    paddingVertical: 8,
    paddingHorizontal: 12,
    borderRadius: 8,
    alignSelf: "center",
  },
  
  deleteBtnText: { color: "#fff", fontWeight: "700" },
});
